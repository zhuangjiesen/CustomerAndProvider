/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.java.core.redis.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-12-07")
public class BizEventThrift implements org.apache.thrift.TBase<BizEventThrift, BizEventThrift._Fields>, java.io.Serializable, Cloneable, Comparable<BizEventThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizEventThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IMAGE_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("imageObj", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COVER_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("coverObj", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField AUTHOR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("authorInfo", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LIST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("listStatus", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField INST_SEARCH_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("instSearchStatus", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField INST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instId", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField HAS_ANDROID_FIELD_DESC = new org.apache.thrift.protocol.TField("hasAndroid", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField HAS_IOS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasIOS", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField ANDROID_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("androidVersion", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField IOS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("iosVersion", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PLATFORM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("platformType", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField COVER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("coverType", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField COVER_RESOURCE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("coverResourceList", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField COVER_RESOURCE_ID_ARR_FIELD_DESC = new org.apache.thrift.protocol.TField("coverResourceIdArr", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField DETAIL_RESOURCE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("detailResourceList", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField DETAIL_RESOURCE_ID_ARR_FIELD_DESC = new org.apache.thrift.protocol.TField("detailResourceIdArr", org.apache.thrift.protocol.TType.LIST, (short)27);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BizEventThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BizEventThriftTupleSchemeFactory();

  public long id; // required
  public String date; // required
  public String name; // required
  public String title; // required
  public int type; // required
  public String team; // required
  public String imageObj; // required
  public String coverObj; // required
  public int direction; // required
  public String description; // required
  public int sequence; // required
  public int category; // required
  public String authorInfo; // required
  public String url; // required
  public int listStatus; // required
  public int instSearchStatus; // required
  public long instId; // required
  public int hasAndroid; // required
  public int hasIOS; // required
  public String androidVersion; // required
  public String iosVersion; // required
  public int platformType; // required
  public int coverType; // required
  public String coverResourceList; // required
  public java.util.List<String> coverResourceIdArr; // required
  public String detailResourceList; // required
  public java.util.List<String> detailResourceIdArr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DATE((short)2, "date"),
    NAME((short)3, "name"),
    TITLE((short)4, "title"),
    TYPE((short)5, "type"),
    TEAM((short)6, "team"),
    IMAGE_OBJ((short)7, "imageObj"),
    COVER_OBJ((short)8, "coverObj"),
    DIRECTION((short)9, "direction"),
    DESCRIPTION((short)10, "description"),
    SEQUENCE((short)11, "sequence"),
    CATEGORY((short)12, "category"),
    AUTHOR_INFO((short)13, "authorInfo"),
    URL((short)14, "url"),
    LIST_STATUS((short)15, "listStatus"),
    INST_SEARCH_STATUS((short)16, "instSearchStatus"),
    INST_ID((short)17, "instId"),
    HAS_ANDROID((short)18, "hasAndroid"),
    HAS_IOS((short)19, "hasIOS"),
    ANDROID_VERSION((short)20, "androidVersion"),
    IOS_VERSION((short)21, "iosVersion"),
    PLATFORM_TYPE((short)22, "platformType"),
    COVER_TYPE((short)23, "coverType"),
    COVER_RESOURCE_LIST((short)24, "coverResourceList"),
    COVER_RESOURCE_ID_ARR((short)25, "coverResourceIdArr"),
    DETAIL_RESOURCE_LIST((short)26, "detailResourceList"),
    DETAIL_RESOURCE_ID_ARR((short)27, "detailResourceIdArr");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DATE
          return DATE;
        case 3: // NAME
          return NAME;
        case 4: // TITLE
          return TITLE;
        case 5: // TYPE
          return TYPE;
        case 6: // TEAM
          return TEAM;
        case 7: // IMAGE_OBJ
          return IMAGE_OBJ;
        case 8: // COVER_OBJ
          return COVER_OBJ;
        case 9: // DIRECTION
          return DIRECTION;
        case 10: // DESCRIPTION
          return DESCRIPTION;
        case 11: // SEQUENCE
          return SEQUENCE;
        case 12: // CATEGORY
          return CATEGORY;
        case 13: // AUTHOR_INFO
          return AUTHOR_INFO;
        case 14: // URL
          return URL;
        case 15: // LIST_STATUS
          return LIST_STATUS;
        case 16: // INST_SEARCH_STATUS
          return INST_SEARCH_STATUS;
        case 17: // INST_ID
          return INST_ID;
        case 18: // HAS_ANDROID
          return HAS_ANDROID;
        case 19: // HAS_IOS
          return HAS_IOS;
        case 20: // ANDROID_VERSION
          return ANDROID_VERSION;
        case 21: // IOS_VERSION
          return IOS_VERSION;
        case 22: // PLATFORM_TYPE
          return PLATFORM_TYPE;
        case 23: // COVER_TYPE
          return COVER_TYPE;
        case 24: // COVER_RESOURCE_LIST
          return COVER_RESOURCE_LIST;
        case 25: // COVER_RESOURCE_ID_ARR
          return COVER_RESOURCE_ID_ARR;
        case 26: // DETAIL_RESOURCE_LIST
          return DETAIL_RESOURCE_LIST;
        case 27: // DETAIL_RESOURCE_ID_ARR
          return DETAIL_RESOURCE_ID_ARR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __DIRECTION_ISSET_ID = 2;
  private static final int __SEQUENCE_ISSET_ID = 3;
  private static final int __CATEGORY_ISSET_ID = 4;
  private static final int __LISTSTATUS_ISSET_ID = 5;
  private static final int __INSTSEARCHSTATUS_ISSET_ID = 6;
  private static final int __INSTID_ISSET_ID = 7;
  private static final int __HASANDROID_ISSET_ID = 8;
  private static final int __HASIOS_ISSET_ID = 9;
  private static final int __PLATFORMTYPE_ISSET_ID = 10;
  private static final int __COVERTYPE_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_OBJ, new org.apache.thrift.meta_data.FieldMetaData("imageObj", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COVER_OBJ, new org.apache.thrift.meta_data.FieldMetaData("coverObj", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("sequence", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTHOR_INFO, new org.apache.thrift.meta_data.FieldMetaData("authorInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("listStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INST_SEARCH_STATUS, new org.apache.thrift.meta_data.FieldMetaData("instSearchStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INST_ID, new org.apache.thrift.meta_data.FieldMetaData("instId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HAS_ANDROID, new org.apache.thrift.meta_data.FieldMetaData("hasAndroid", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_IOS, new org.apache.thrift.meta_data.FieldMetaData("hasIOS", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANDROID_VERSION, new org.apache.thrift.meta_data.FieldMetaData("androidVersion", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IOS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("iosVersion", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("platformType", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COVER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("coverType", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COVER_RESOURCE_LIST, new org.apache.thrift.meta_data.FieldMetaData("coverResourceList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COVER_RESOURCE_ID_ARR, new org.apache.thrift.meta_data.FieldMetaData("coverResourceIdArr", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DETAIL_RESOURCE_LIST, new org.apache.thrift.meta_data.FieldMetaData("detailResourceList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_RESOURCE_ID_ARR, new org.apache.thrift.meta_data.FieldMetaData("detailResourceIdArr", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizEventThrift.class, metaDataMap);
  }

  public BizEventThrift() {
  }

  public BizEventThrift(
    long id,
    String date,
    String name,
    String title,
    int type,
    String team,
    String imageObj,
    String coverObj,
    int direction,
    String description,
    int sequence,
    int category,
    String authorInfo,
    String url,
    int listStatus,
    int instSearchStatus,
    long instId,
    int hasAndroid,
    int hasIOS,
    String androidVersion,
    String iosVersion,
    int platformType,
    int coverType,
    String coverResourceList,
    java.util.List<String> coverResourceIdArr,
    String detailResourceList,
    java.util.List<String> detailResourceIdArr)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.date = date;
    this.name = name;
    this.title = title;
    this.type = type;
    setTypeIsSet(true);
    this.team = team;
    this.imageObj = imageObj;
    this.coverObj = coverObj;
    this.direction = direction;
    setDirectionIsSet(true);
    this.description = description;
    this.sequence = sequence;
    setSequenceIsSet(true);
    this.category = category;
    setCategoryIsSet(true);
    this.authorInfo = authorInfo;
    this.url = url;
    this.listStatus = listStatus;
    setListStatusIsSet(true);
    this.instSearchStatus = instSearchStatus;
    setInstSearchStatusIsSet(true);
    this.instId = instId;
    setInstIdIsSet(true);
    this.hasAndroid = hasAndroid;
    setHasAndroidIsSet(true);
    this.hasIOS = hasIOS;
    setHasIOSIsSet(true);
    this.androidVersion = androidVersion;
    this.iosVersion = iosVersion;
    this.platformType = platformType;
    setPlatformTypeIsSet(true);
    this.coverType = coverType;
    setCoverTypeIsSet(true);
    this.coverResourceList = coverResourceList;
    this.coverResourceIdArr = coverResourceIdArr;
    this.detailResourceList = detailResourceList;
    this.detailResourceIdArr = detailResourceIdArr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizEventThrift(BizEventThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.type = other.type;
    if (other.isSetTeam()) {
      this.team = other.team;
    }
    if (other.isSetImageObj()) {
      this.imageObj = other.imageObj;
    }
    if (other.isSetCoverObj()) {
      this.coverObj = other.coverObj;
    }
    this.direction = other.direction;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.sequence = other.sequence;
    this.category = other.category;
    if (other.isSetAuthorInfo()) {
      this.authorInfo = other.authorInfo;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.listStatus = other.listStatus;
    this.instSearchStatus = other.instSearchStatus;
    this.instId = other.instId;
    this.hasAndroid = other.hasAndroid;
    this.hasIOS = other.hasIOS;
    if (other.isSetAndroidVersion()) {
      this.androidVersion = other.androidVersion;
    }
    if (other.isSetIosVersion()) {
      this.iosVersion = other.iosVersion;
    }
    this.platformType = other.platformType;
    this.coverType = other.coverType;
    if (other.isSetCoverResourceList()) {
      this.coverResourceList = other.coverResourceList;
    }
    if (other.isSetCoverResourceIdArr()) {
      java.util.List<String> __this__coverResourceIdArr = new java.util.ArrayList<String>(other.coverResourceIdArr);
      this.coverResourceIdArr = __this__coverResourceIdArr;
    }
    if (other.isSetDetailResourceList()) {
      this.detailResourceList = other.detailResourceList;
    }
    if (other.isSetDetailResourceIdArr()) {
      java.util.List<String> __this__detailResourceIdArr = new java.util.ArrayList<String>(other.detailResourceIdArr);
      this.detailResourceIdArr = __this__detailResourceIdArr;
    }
  }

  public BizEventThrift deepCopy() {
    return new BizEventThrift(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.date = null;
    this.name = null;
    this.title = null;
    setTypeIsSet(false);
    this.type = 0;
    this.team = null;
    this.imageObj = null;
    this.coverObj = null;
    setDirectionIsSet(false);
    this.direction = 0;
    this.description = null;
    setSequenceIsSet(false);
    this.sequence = 0;
    setCategoryIsSet(false);
    this.category = 0;
    this.authorInfo = null;
    this.url = null;
    setListStatusIsSet(false);
    this.listStatus = 0;
    setInstSearchStatusIsSet(false);
    this.instSearchStatus = 0;
    setInstIdIsSet(false);
    this.instId = 0;
    setHasAndroidIsSet(false);
    this.hasAndroid = 0;
    setHasIOSIsSet(false);
    this.hasIOS = 0;
    this.androidVersion = null;
    this.iosVersion = null;
    setPlatformTypeIsSet(false);
    this.platformType = 0;
    setCoverTypeIsSet(false);
    this.coverType = 0;
    this.coverResourceList = null;
    this.coverResourceIdArr = null;
    this.detailResourceList = null;
    this.detailResourceIdArr = null;
  }

  public long getId() {
    return this.id;
  }

  public BizEventThrift setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getDate() {
    return this.date;
  }

  public BizEventThrift setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public BizEventThrift setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public BizEventThrift setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public BizEventThrift setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getTeam() {
    return this.team;
  }

  public BizEventThrift setTeam(String team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  public String getImageObj() {
    return this.imageObj;
  }

  public BizEventThrift setImageObj(String imageObj) {
    this.imageObj = imageObj;
    return this;
  }

  public void unsetImageObj() {
    this.imageObj = null;
  }

  /** Returns true if field imageObj is set (has been assigned a value) and false otherwise */
  public boolean isSetImageObj() {
    return this.imageObj != null;
  }

  public void setImageObjIsSet(boolean value) {
    if (!value) {
      this.imageObj = null;
    }
  }

  public String getCoverObj() {
    return this.coverObj;
  }

  public BizEventThrift setCoverObj(String coverObj) {
    this.coverObj = coverObj;
    return this;
  }

  public void unsetCoverObj() {
    this.coverObj = null;
  }

  /** Returns true if field coverObj is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverObj() {
    return this.coverObj != null;
  }

  public void setCoverObjIsSet(boolean value) {
    if (!value) {
      this.coverObj = null;
    }
  }

  public int getDirection() {
    return this.direction;
  }

  public BizEventThrift setDirection(int direction) {
    this.direction = direction;
    setDirectionIsSet(true);
    return this;
  }

  public void unsetDirection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  public void setDirectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRECTION_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public BizEventThrift setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getSequence() {
    return this.sequence;
  }

  public BizEventThrift setSequence(int sequence) {
    this.sequence = sequence;
    setSequenceIsSet(true);
    return this;
  }

  public void unsetSequence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  /** Returns true if field sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  public void setSequenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQUENCE_ISSET_ID, value);
  }

  public int getCategory() {
    return this.category;
  }

  public BizEventThrift setCategory(int category) {
    this.category = category;
    setCategoryIsSet(true);
    return this;
  }

  public void unsetCategory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  public void setCategoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CATEGORY_ISSET_ID, value);
  }

  public String getAuthorInfo() {
    return this.authorInfo;
  }

  public BizEventThrift setAuthorInfo(String authorInfo) {
    this.authorInfo = authorInfo;
    return this;
  }

  public void unsetAuthorInfo() {
    this.authorInfo = null;
  }

  /** Returns true if field authorInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorInfo() {
    return this.authorInfo != null;
  }

  public void setAuthorInfoIsSet(boolean value) {
    if (!value) {
      this.authorInfo = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public BizEventThrift setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getListStatus() {
    return this.listStatus;
  }

  public BizEventThrift setListStatus(int listStatus) {
    this.listStatus = listStatus;
    setListStatusIsSet(true);
    return this;
  }

  public void unsetListStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LISTSTATUS_ISSET_ID);
  }

  /** Returns true if field listStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetListStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LISTSTATUS_ISSET_ID);
  }

  public void setListStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LISTSTATUS_ISSET_ID, value);
  }

  public int getInstSearchStatus() {
    return this.instSearchStatus;
  }

  public BizEventThrift setInstSearchStatus(int instSearchStatus) {
    this.instSearchStatus = instSearchStatus;
    setInstSearchStatusIsSet(true);
    return this;
  }

  public void unsetInstSearchStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSTSEARCHSTATUS_ISSET_ID);
  }

  /** Returns true if field instSearchStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetInstSearchStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSTSEARCHSTATUS_ISSET_ID);
  }

  public void setInstSearchStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSTSEARCHSTATUS_ISSET_ID, value);
  }

  public long getInstId() {
    return this.instId;
  }

  public BizEventThrift setInstId(long instId) {
    this.instId = instId;
    setInstIdIsSet(true);
    return this;
  }

  public void unsetInstId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSTID_ISSET_ID);
  }

  /** Returns true if field instId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSTID_ISSET_ID);
  }

  public void setInstIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSTID_ISSET_ID, value);
  }

  public int getHasAndroid() {
    return this.hasAndroid;
  }

  public BizEventThrift setHasAndroid(int hasAndroid) {
    this.hasAndroid = hasAndroid;
    setHasAndroidIsSet(true);
    return this;
  }

  public void unsetHasAndroid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASANDROID_ISSET_ID);
  }

  /** Returns true if field hasAndroid is set (has been assigned a value) and false otherwise */
  public boolean isSetHasAndroid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASANDROID_ISSET_ID);
  }

  public void setHasAndroidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASANDROID_ISSET_ID, value);
  }

  public int getHasIOS() {
    return this.hasIOS;
  }

  public BizEventThrift setHasIOS(int hasIOS) {
    this.hasIOS = hasIOS;
    setHasIOSIsSet(true);
    return this;
  }

  public void unsetHasIOS() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASIOS_ISSET_ID);
  }

  /** Returns true if field hasIOS is set (has been assigned a value) and false otherwise */
  public boolean isSetHasIOS() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASIOS_ISSET_ID);
  }

  public void setHasIOSIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASIOS_ISSET_ID, value);
  }

  public String getAndroidVersion() {
    return this.androidVersion;
  }

  public BizEventThrift setAndroidVersion(String androidVersion) {
    this.androidVersion = androidVersion;
    return this;
  }

  public void unsetAndroidVersion() {
    this.androidVersion = null;
  }

  /** Returns true if field androidVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAndroidVersion() {
    return this.androidVersion != null;
  }

  public void setAndroidVersionIsSet(boolean value) {
    if (!value) {
      this.androidVersion = null;
    }
  }

  public String getIosVersion() {
    return this.iosVersion;
  }

  public BizEventThrift setIosVersion(String iosVersion) {
    this.iosVersion = iosVersion;
    return this;
  }

  public void unsetIosVersion() {
    this.iosVersion = null;
  }

  /** Returns true if field iosVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetIosVersion() {
    return this.iosVersion != null;
  }

  public void setIosVersionIsSet(boolean value) {
    if (!value) {
      this.iosVersion = null;
    }
  }

  public int getPlatformType() {
    return this.platformType;
  }

  public BizEventThrift setPlatformType(int platformType) {
    this.platformType = platformType;
    setPlatformTypeIsSet(true);
    return this;
  }

  public void unsetPlatformType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PLATFORMTYPE_ISSET_ID);
  }

  /** Returns true if field platformType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PLATFORMTYPE_ISSET_ID);
  }

  public void setPlatformTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PLATFORMTYPE_ISSET_ID, value);
  }

  public int getCoverType() {
    return this.coverType;
  }

  public BizEventThrift setCoverType(int coverType) {
    this.coverType = coverType;
    setCoverTypeIsSet(true);
    return this;
  }

  public void unsetCoverType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COVERTYPE_ISSET_ID);
  }

  /** Returns true if field coverType is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COVERTYPE_ISSET_ID);
  }

  public void setCoverTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COVERTYPE_ISSET_ID, value);
  }

  public String getCoverResourceList() {
    return this.coverResourceList;
  }

  public BizEventThrift setCoverResourceList(String coverResourceList) {
    this.coverResourceList = coverResourceList;
    return this;
  }

  public void unsetCoverResourceList() {
    this.coverResourceList = null;
  }

  /** Returns true if field coverResourceList is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverResourceList() {
    return this.coverResourceList != null;
  }

  public void setCoverResourceListIsSet(boolean value) {
    if (!value) {
      this.coverResourceList = null;
    }
  }

  public int getCoverResourceIdArrSize() {
    return (this.coverResourceIdArr == null) ? 0 : this.coverResourceIdArr.size();
  }

  public java.util.Iterator<String> getCoverResourceIdArrIterator() {
    return (this.coverResourceIdArr == null) ? null : this.coverResourceIdArr.iterator();
  }

  public void addToCoverResourceIdArr(String elem) {
    if (this.coverResourceIdArr == null) {
      this.coverResourceIdArr = new java.util.ArrayList<String>();
    }
    this.coverResourceIdArr.add(elem);
  }

  public java.util.List<String> getCoverResourceIdArr() {
    return this.coverResourceIdArr;
  }

  public BizEventThrift setCoverResourceIdArr(java.util.List<String> coverResourceIdArr) {
    this.coverResourceIdArr = coverResourceIdArr;
    return this;
  }

  public void unsetCoverResourceIdArr() {
    this.coverResourceIdArr = null;
  }

  /** Returns true if field coverResourceIdArr is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverResourceIdArr() {
    return this.coverResourceIdArr != null;
  }

  public void setCoverResourceIdArrIsSet(boolean value) {
    if (!value) {
      this.coverResourceIdArr = null;
    }
  }

  public String getDetailResourceList() {
    return this.detailResourceList;
  }

  public BizEventThrift setDetailResourceList(String detailResourceList) {
    this.detailResourceList = detailResourceList;
    return this;
  }

  public void unsetDetailResourceList() {
    this.detailResourceList = null;
  }

  /** Returns true if field detailResourceList is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailResourceList() {
    return this.detailResourceList != null;
  }

  public void setDetailResourceListIsSet(boolean value) {
    if (!value) {
      this.detailResourceList = null;
    }
  }

  public int getDetailResourceIdArrSize() {
    return (this.detailResourceIdArr == null) ? 0 : this.detailResourceIdArr.size();
  }

  public java.util.Iterator<String> getDetailResourceIdArrIterator() {
    return (this.detailResourceIdArr == null) ? null : this.detailResourceIdArr.iterator();
  }

  public void addToDetailResourceIdArr(String elem) {
    if (this.detailResourceIdArr == null) {
      this.detailResourceIdArr = new java.util.ArrayList<String>();
    }
    this.detailResourceIdArr.add(elem);
  }

  public java.util.List<String> getDetailResourceIdArr() {
    return this.detailResourceIdArr;
  }

  public BizEventThrift setDetailResourceIdArr(java.util.List<String> detailResourceIdArr) {
    this.detailResourceIdArr = detailResourceIdArr;
    return this;
  }

  public void unsetDetailResourceIdArr() {
    this.detailResourceIdArr = null;
  }

  /** Returns true if field detailResourceIdArr is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailResourceIdArr() {
    return this.detailResourceIdArr != null;
  }

  public void setDetailResourceIdArrIsSet(boolean value) {
    if (!value) {
      this.detailResourceIdArr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((String)value);
      }
      break;

    case IMAGE_OBJ:
      if (value == null) {
        unsetImageObj();
      } else {
        setImageObj((String)value);
      }
      break;

    case COVER_OBJ:
      if (value == null) {
        unsetCoverObj();
      } else {
        setCoverObj((String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((Integer)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((Integer)value);
      }
      break;

    case AUTHOR_INFO:
      if (value == null) {
        unsetAuthorInfo();
      } else {
        setAuthorInfo((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case LIST_STATUS:
      if (value == null) {
        unsetListStatus();
      } else {
        setListStatus((Integer)value);
      }
      break;

    case INST_SEARCH_STATUS:
      if (value == null) {
        unsetInstSearchStatus();
      } else {
        setInstSearchStatus((Integer)value);
      }
      break;

    case INST_ID:
      if (value == null) {
        unsetInstId();
      } else {
        setInstId((Long)value);
      }
      break;

    case HAS_ANDROID:
      if (value == null) {
        unsetHasAndroid();
      } else {
        setHasAndroid((Integer)value);
      }
      break;

    case HAS_IOS:
      if (value == null) {
        unsetHasIOS();
      } else {
        setHasIOS((Integer)value);
      }
      break;

    case ANDROID_VERSION:
      if (value == null) {
        unsetAndroidVersion();
      } else {
        setAndroidVersion((String)value);
      }
      break;

    case IOS_VERSION:
      if (value == null) {
        unsetIosVersion();
      } else {
        setIosVersion((String)value);
      }
      break;

    case PLATFORM_TYPE:
      if (value == null) {
        unsetPlatformType();
      } else {
        setPlatformType((Integer)value);
      }
      break;

    case COVER_TYPE:
      if (value == null) {
        unsetCoverType();
      } else {
        setCoverType((Integer)value);
      }
      break;

    case COVER_RESOURCE_LIST:
      if (value == null) {
        unsetCoverResourceList();
      } else {
        setCoverResourceList((String)value);
      }
      break;

    case COVER_RESOURCE_ID_ARR:
      if (value == null) {
        unsetCoverResourceIdArr();
      } else {
        setCoverResourceIdArr((java.util.List<String>)value);
      }
      break;

    case DETAIL_RESOURCE_LIST:
      if (value == null) {
        unsetDetailResourceList();
      } else {
        setDetailResourceList((String)value);
      }
      break;

    case DETAIL_RESOURCE_ID_ARR:
      if (value == null) {
        unsetDetailResourceIdArr();
      } else {
        setDetailResourceIdArr((java.util.List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DATE:
      return getDate();

    case NAME:
      return getName();

    case TITLE:
      return getTitle();

    case TYPE:
      return getType();

    case TEAM:
      return getTeam();

    case IMAGE_OBJ:
      return getImageObj();

    case COVER_OBJ:
      return getCoverObj();

    case DIRECTION:
      return getDirection();

    case DESCRIPTION:
      return getDescription();

    case SEQUENCE:
      return getSequence();

    case CATEGORY:
      return getCategory();

    case AUTHOR_INFO:
      return getAuthorInfo();

    case URL:
      return getUrl();

    case LIST_STATUS:
      return getListStatus();

    case INST_SEARCH_STATUS:
      return getInstSearchStatus();

    case INST_ID:
      return getInstId();

    case HAS_ANDROID:
      return getHasAndroid();

    case HAS_IOS:
      return getHasIOS();

    case ANDROID_VERSION:
      return getAndroidVersion();

    case IOS_VERSION:
      return getIosVersion();

    case PLATFORM_TYPE:
      return getPlatformType();

    case COVER_TYPE:
      return getCoverType();

    case COVER_RESOURCE_LIST:
      return getCoverResourceList();

    case COVER_RESOURCE_ID_ARR:
      return getCoverResourceIdArr();

    case DETAIL_RESOURCE_LIST:
      return getDetailResourceList();

    case DETAIL_RESOURCE_ID_ARR:
      return getDetailResourceIdArr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DATE:
      return isSetDate();
    case NAME:
      return isSetName();
    case TITLE:
      return isSetTitle();
    case TYPE:
      return isSetType();
    case TEAM:
      return isSetTeam();
    case IMAGE_OBJ:
      return isSetImageObj();
    case COVER_OBJ:
      return isSetCoverObj();
    case DIRECTION:
      return isSetDirection();
    case DESCRIPTION:
      return isSetDescription();
    case SEQUENCE:
      return isSetSequence();
    case CATEGORY:
      return isSetCategory();
    case AUTHOR_INFO:
      return isSetAuthorInfo();
    case URL:
      return isSetUrl();
    case LIST_STATUS:
      return isSetListStatus();
    case INST_SEARCH_STATUS:
      return isSetInstSearchStatus();
    case INST_ID:
      return isSetInstId();
    case HAS_ANDROID:
      return isSetHasAndroid();
    case HAS_IOS:
      return isSetHasIOS();
    case ANDROID_VERSION:
      return isSetAndroidVersion();
    case IOS_VERSION:
      return isSetIosVersion();
    case PLATFORM_TYPE:
      return isSetPlatformType();
    case COVER_TYPE:
      return isSetCoverType();
    case COVER_RESOURCE_LIST:
      return isSetCoverResourceList();
    case COVER_RESOURCE_ID_ARR:
      return isSetCoverResourceIdArr();
    case DETAIL_RESOURCE_LIST:
      return isSetDetailResourceList();
    case DETAIL_RESOURCE_ID_ARR:
      return isSetDetailResourceIdArr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizEventThrift)
      return this.equals((BizEventThrift)that);
    return false;
  }

  public boolean equals(BizEventThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_imageObj = true && this.isSetImageObj();
    boolean that_present_imageObj = true && that.isSetImageObj();
    if (this_present_imageObj || that_present_imageObj) {
      if (!(this_present_imageObj && that_present_imageObj))
        return false;
      if (!this.imageObj.equals(that.imageObj))
        return false;
    }

    boolean this_present_coverObj = true && this.isSetCoverObj();
    boolean that_present_coverObj = true && that.isSetCoverObj();
    if (this_present_coverObj || that_present_coverObj) {
      if (!(this_present_coverObj && that_present_coverObj))
        return false;
      if (!this.coverObj.equals(that.coverObj))
        return false;
    }

    boolean this_present_direction = true;
    boolean that_present_direction = true;
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (this.direction != that.direction)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_sequence = true;
    boolean that_present_sequence = true;
    if (this_present_sequence || that_present_sequence) {
      if (!(this_present_sequence && that_present_sequence))
        return false;
      if (this.sequence != that.sequence)
        return false;
    }

    boolean this_present_category = true;
    boolean that_present_category = true;
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (this.category != that.category)
        return false;
    }

    boolean this_present_authorInfo = true && this.isSetAuthorInfo();
    boolean that_present_authorInfo = true && that.isSetAuthorInfo();
    if (this_present_authorInfo || that_present_authorInfo) {
      if (!(this_present_authorInfo && that_present_authorInfo))
        return false;
      if (!this.authorInfo.equals(that.authorInfo))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_listStatus = true;
    boolean that_present_listStatus = true;
    if (this_present_listStatus || that_present_listStatus) {
      if (!(this_present_listStatus && that_present_listStatus))
        return false;
      if (this.listStatus != that.listStatus)
        return false;
    }

    boolean this_present_instSearchStatus = true;
    boolean that_present_instSearchStatus = true;
    if (this_present_instSearchStatus || that_present_instSearchStatus) {
      if (!(this_present_instSearchStatus && that_present_instSearchStatus))
        return false;
      if (this.instSearchStatus != that.instSearchStatus)
        return false;
    }

    boolean this_present_instId = true;
    boolean that_present_instId = true;
    if (this_present_instId || that_present_instId) {
      if (!(this_present_instId && that_present_instId))
        return false;
      if (this.instId != that.instId)
        return false;
    }

    boolean this_present_hasAndroid = true;
    boolean that_present_hasAndroid = true;
    if (this_present_hasAndroid || that_present_hasAndroid) {
      if (!(this_present_hasAndroid && that_present_hasAndroid))
        return false;
      if (this.hasAndroid != that.hasAndroid)
        return false;
    }

    boolean this_present_hasIOS = true;
    boolean that_present_hasIOS = true;
    if (this_present_hasIOS || that_present_hasIOS) {
      if (!(this_present_hasIOS && that_present_hasIOS))
        return false;
      if (this.hasIOS != that.hasIOS)
        return false;
    }

    boolean this_present_androidVersion = true && this.isSetAndroidVersion();
    boolean that_present_androidVersion = true && that.isSetAndroidVersion();
    if (this_present_androidVersion || that_present_androidVersion) {
      if (!(this_present_androidVersion && that_present_androidVersion))
        return false;
      if (!this.androidVersion.equals(that.androidVersion))
        return false;
    }

    boolean this_present_iosVersion = true && this.isSetIosVersion();
    boolean that_present_iosVersion = true && that.isSetIosVersion();
    if (this_present_iosVersion || that_present_iosVersion) {
      if (!(this_present_iosVersion && that_present_iosVersion))
        return false;
      if (!this.iosVersion.equals(that.iosVersion))
        return false;
    }

    boolean this_present_platformType = true;
    boolean that_present_platformType = true;
    if (this_present_platformType || that_present_platformType) {
      if (!(this_present_platformType && that_present_platformType))
        return false;
      if (this.platformType != that.platformType)
        return false;
    }

    boolean this_present_coverType = true;
    boolean that_present_coverType = true;
    if (this_present_coverType || that_present_coverType) {
      if (!(this_present_coverType && that_present_coverType))
        return false;
      if (this.coverType != that.coverType)
        return false;
    }

    boolean this_present_coverResourceList = true && this.isSetCoverResourceList();
    boolean that_present_coverResourceList = true && that.isSetCoverResourceList();
    if (this_present_coverResourceList || that_present_coverResourceList) {
      if (!(this_present_coverResourceList && that_present_coverResourceList))
        return false;
      if (!this.coverResourceList.equals(that.coverResourceList))
        return false;
    }

    boolean this_present_coverResourceIdArr = true && this.isSetCoverResourceIdArr();
    boolean that_present_coverResourceIdArr = true && that.isSetCoverResourceIdArr();
    if (this_present_coverResourceIdArr || that_present_coverResourceIdArr) {
      if (!(this_present_coverResourceIdArr && that_present_coverResourceIdArr))
        return false;
      if (!this.coverResourceIdArr.equals(that.coverResourceIdArr))
        return false;
    }

    boolean this_present_detailResourceList = true && this.isSetDetailResourceList();
    boolean that_present_detailResourceList = true && that.isSetDetailResourceList();
    if (this_present_detailResourceList || that_present_detailResourceList) {
      if (!(this_present_detailResourceList && that_present_detailResourceList))
        return false;
      if (!this.detailResourceList.equals(that.detailResourceList))
        return false;
    }

    boolean this_present_detailResourceIdArr = true && this.isSetDetailResourceIdArr();
    boolean that_present_detailResourceIdArr = true && that.isSetDetailResourceIdArr();
    if (this_present_detailResourceIdArr || that_present_detailResourceIdArr) {
      if (!(this_present_detailResourceIdArr && that_present_detailResourceIdArr))
        return false;
      if (!this.detailResourceIdArr.equals(that.detailResourceIdArr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + type;

    hashCode = hashCode * 8191 + ((isSetTeam()) ? 131071 : 524287);
    if (isSetTeam())
      hashCode = hashCode * 8191 + team.hashCode();

    hashCode = hashCode * 8191 + ((isSetImageObj()) ? 131071 : 524287);
    if (isSetImageObj())
      hashCode = hashCode * 8191 + imageObj.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoverObj()) ? 131071 : 524287);
    if (isSetCoverObj())
      hashCode = hashCode * 8191 + coverObj.hashCode();

    hashCode = hashCode * 8191 + direction;

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + sequence;

    hashCode = hashCode * 8191 + category;

    hashCode = hashCode * 8191 + ((isSetAuthorInfo()) ? 131071 : 524287);
    if (isSetAuthorInfo())
      hashCode = hashCode * 8191 + authorInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + listStatus;

    hashCode = hashCode * 8191 + instSearchStatus;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(instId);

    hashCode = hashCode * 8191 + hasAndroid;

    hashCode = hashCode * 8191 + hasIOS;

    hashCode = hashCode * 8191 + ((isSetAndroidVersion()) ? 131071 : 524287);
    if (isSetAndroidVersion())
      hashCode = hashCode * 8191 + androidVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetIosVersion()) ? 131071 : 524287);
    if (isSetIosVersion())
      hashCode = hashCode * 8191 + iosVersion.hashCode();

    hashCode = hashCode * 8191 + platformType;

    hashCode = hashCode * 8191 + coverType;

    hashCode = hashCode * 8191 + ((isSetCoverResourceList()) ? 131071 : 524287);
    if (isSetCoverResourceList())
      hashCode = hashCode * 8191 + coverResourceList.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoverResourceIdArr()) ? 131071 : 524287);
    if (isSetCoverResourceIdArr())
      hashCode = hashCode * 8191 + coverResourceIdArr.hashCode();

    hashCode = hashCode * 8191 + ((isSetDetailResourceList()) ? 131071 : 524287);
    if (isSetDetailResourceList())
      hashCode = hashCode * 8191 + detailResourceList.hashCode();

    hashCode = hashCode * 8191 + ((isSetDetailResourceIdArr()) ? 131071 : 524287);
    if (isSetDetailResourceIdArr())
      hashCode = hashCode * 8191 + detailResourceIdArr.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BizEventThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageObj()).compareTo(other.isSetImageObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageObj, other.imageObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverObj()).compareTo(other.isSetCoverObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverObj, other.coverObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(other.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence, other.sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorInfo()).compareTo(other.isSetAuthorInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorInfo, other.authorInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListStatus()).compareTo(other.isSetListStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listStatus, other.listStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstSearchStatus()).compareTo(other.isSetInstSearchStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstSearchStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instSearchStatus, other.instSearchStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstId()).compareTo(other.isSetInstId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instId, other.instId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasAndroid()).compareTo(other.isSetHasAndroid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasAndroid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasAndroid, other.hasAndroid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasIOS()).compareTo(other.isSetHasIOS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasIOS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasIOS, other.hasIOS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAndroidVersion()).compareTo(other.isSetAndroidVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAndroidVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.androidVersion, other.androidVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIosVersion()).compareTo(other.isSetIosVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIosVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iosVersion, other.iosVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformType()).compareTo(other.isSetPlatformType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformType, other.platformType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverType()).compareTo(other.isSetCoverType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverType, other.coverType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverResourceList()).compareTo(other.isSetCoverResourceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverResourceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverResourceList, other.coverResourceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverResourceIdArr()).compareTo(other.isSetCoverResourceIdArr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverResourceIdArr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverResourceIdArr, other.coverResourceIdArr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailResourceList()).compareTo(other.isSetDetailResourceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailResourceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailResourceList, other.detailResourceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailResourceIdArr()).compareTo(other.isSetDetailResourceIdArr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailResourceIdArr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailResourceIdArr, other.detailResourceIdArr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizEventThrift(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("team:");
    if (this.team == null) {
      sb.append("null");
    } else {
      sb.append(this.team);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageObj:");
    if (this.imageObj == null) {
      sb.append("null");
    } else {
      sb.append(this.imageObj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coverObj:");
    if (this.coverObj == null) {
      sb.append("null");
    } else {
      sb.append(this.coverObj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    sb.append(this.direction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequence:");
    sb.append(this.sequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    sb.append(this.category);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorInfo:");
    if (this.authorInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.authorInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listStatus:");
    sb.append(this.listStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("instSearchStatus:");
    sb.append(this.instSearchStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("instId:");
    sb.append(this.instId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasAndroid:");
    sb.append(this.hasAndroid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasIOS:");
    sb.append(this.hasIOS);
    first = false;
    if (!first) sb.append(", ");
    sb.append("androidVersion:");
    if (this.androidVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.androidVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iosVersion:");
    if (this.iosVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.iosVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platformType:");
    sb.append(this.platformType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coverType:");
    sb.append(this.coverType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coverResourceList:");
    if (this.coverResourceList == null) {
      sb.append("null");
    } else {
      sb.append(this.coverResourceList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coverResourceIdArr:");
    if (this.coverResourceIdArr == null) {
      sb.append("null");
    } else {
      sb.append(this.coverResourceIdArr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailResourceList:");
    if (this.detailResourceList == null) {
      sb.append("null");
    } else {
      sb.append(this.detailResourceList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailResourceIdArr:");
    if (this.detailResourceIdArr == null) {
      sb.append("null");
    } else {
      sb.append(this.detailResourceIdArr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizEventThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BizEventThriftStandardScheme getScheme() {
      return new BizEventThriftStandardScheme();
    }
  }

  private static class BizEventThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<BizEventThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizEventThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.team = iprot.readString();
              struct.setTeamIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMAGE_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageObj = iprot.readString();
              struct.setImageObjIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COVER_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coverObj = iprot.readString();
              struct.setCoverObjIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = iprot.readI32();
              struct.setDirectionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequence = iprot.readI32();
              struct.setSequenceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.category = iprot.readI32();
              struct.setCategoryIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AUTHOR_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorInfo = iprot.readString();
              struct.setAuthorInfoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LIST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.listStatus = iprot.readI32();
              struct.setListStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INST_SEARCH_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.instSearchStatus = iprot.readI32();
              struct.setInstSearchStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.instId = iprot.readI64();
              struct.setInstIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // HAS_ANDROID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasAndroid = iprot.readI32();
              struct.setHasAndroidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // HAS_IOS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasIOS = iprot.readI32();
              struct.setHasIOSIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ANDROID_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.androidVersion = iprot.readString();
              struct.setAndroidVersionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IOS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iosVersion = iprot.readString();
              struct.setIosVersionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PLATFORM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformType = iprot.readI32();
              struct.setPlatformTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // COVER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coverType = iprot.readI32();
              struct.setCoverTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // COVER_RESOURCE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coverResourceList = iprot.readString();
              struct.setCoverResourceListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // COVER_RESOURCE_ID_ARR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.coverResourceIdArr = new java.util.ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.coverResourceIdArr.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCoverResourceIdArrIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DETAIL_RESOURCE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailResourceList = iprot.readString();
              struct.setDetailResourceListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DETAIL_RESOURCE_ID_ARR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.detailResourceIdArr = new java.util.ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.detailResourceIdArr.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDetailResourceIdArrIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizEventThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.team != null) {
        oprot.writeFieldBegin(TEAM_FIELD_DESC);
        oprot.writeString(struct.team);
        oprot.writeFieldEnd();
      }
      if (struct.imageObj != null) {
        oprot.writeFieldBegin(IMAGE_OBJ_FIELD_DESC);
        oprot.writeString(struct.imageObj);
        oprot.writeFieldEnd();
      }
      if (struct.coverObj != null) {
        oprot.writeFieldBegin(COVER_OBJ_FIELD_DESC);
        oprot.writeString(struct.coverObj);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
      oprot.writeI32(struct.direction);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
      oprot.writeI32(struct.sequence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.category);
      oprot.writeFieldEnd();
      if (struct.authorInfo != null) {
        oprot.writeFieldBegin(AUTHOR_INFO_FIELD_DESC);
        oprot.writeString(struct.authorInfo);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.listStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INST_SEARCH_STATUS_FIELD_DESC);
      oprot.writeI32(struct.instSearchStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INST_ID_FIELD_DESC);
      oprot.writeI64(struct.instId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_ANDROID_FIELD_DESC);
      oprot.writeI32(struct.hasAndroid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_IOS_FIELD_DESC);
      oprot.writeI32(struct.hasIOS);
      oprot.writeFieldEnd();
      if (struct.androidVersion != null) {
        oprot.writeFieldBegin(ANDROID_VERSION_FIELD_DESC);
        oprot.writeString(struct.androidVersion);
        oprot.writeFieldEnd();
      }
      if (struct.iosVersion != null) {
        oprot.writeFieldBegin(IOS_VERSION_FIELD_DESC);
        oprot.writeString(struct.iosVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATFORM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.platformType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COVER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.coverType);
      oprot.writeFieldEnd();
      if (struct.coverResourceList != null) {
        oprot.writeFieldBegin(COVER_RESOURCE_LIST_FIELD_DESC);
        oprot.writeString(struct.coverResourceList);
        oprot.writeFieldEnd();
      }
      if (struct.coverResourceIdArr != null) {
        oprot.writeFieldBegin(COVER_RESOURCE_ID_ARR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.coverResourceIdArr.size()));
          for (String _iter6 : struct.coverResourceIdArr)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.detailResourceList != null) {
        oprot.writeFieldBegin(DETAIL_RESOURCE_LIST_FIELD_DESC);
        oprot.writeString(struct.detailResourceList);
        oprot.writeFieldEnd();
      }
      if (struct.detailResourceIdArr != null) {
        oprot.writeFieldBegin(DETAIL_RESOURCE_ID_ARR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.detailResourceIdArr.size()));
          for (String _iter7 : struct.detailResourceIdArr)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizEventThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BizEventThriftTupleScheme getScheme() {
      return new BizEventThriftTupleScheme();
    }
  }

  private static class BizEventThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<BizEventThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizEventThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDate()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetTitle()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetTeam()) {
        optionals.set(5);
      }
      if (struct.isSetImageObj()) {
        optionals.set(6);
      }
      if (struct.isSetCoverObj()) {
        optionals.set(7);
      }
      if (struct.isSetDirection()) {
        optionals.set(8);
      }
      if (struct.isSetDescription()) {
        optionals.set(9);
      }
      if (struct.isSetSequence()) {
        optionals.set(10);
      }
      if (struct.isSetCategory()) {
        optionals.set(11);
      }
      if (struct.isSetAuthorInfo()) {
        optionals.set(12);
      }
      if (struct.isSetUrl()) {
        optionals.set(13);
      }
      if (struct.isSetListStatus()) {
        optionals.set(14);
      }
      if (struct.isSetInstSearchStatus()) {
        optionals.set(15);
      }
      if (struct.isSetInstId()) {
        optionals.set(16);
      }
      if (struct.isSetHasAndroid()) {
        optionals.set(17);
      }
      if (struct.isSetHasIOS()) {
        optionals.set(18);
      }
      if (struct.isSetAndroidVersion()) {
        optionals.set(19);
      }
      if (struct.isSetIosVersion()) {
        optionals.set(20);
      }
      if (struct.isSetPlatformType()) {
        optionals.set(21);
      }
      if (struct.isSetCoverType()) {
        optionals.set(22);
      }
      if (struct.isSetCoverResourceList()) {
        optionals.set(23);
      }
      if (struct.isSetCoverResourceIdArr()) {
        optionals.set(24);
      }
      if (struct.isSetDetailResourceList()) {
        optionals.set(25);
      }
      if (struct.isSetDetailResourceIdArr()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetTeam()) {
        oprot.writeString(struct.team);
      }
      if (struct.isSetImageObj()) {
        oprot.writeString(struct.imageObj);
      }
      if (struct.isSetCoverObj()) {
        oprot.writeString(struct.coverObj);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetSequence()) {
        oprot.writeI32(struct.sequence);
      }
      if (struct.isSetCategory()) {
        oprot.writeI32(struct.category);
      }
      if (struct.isSetAuthorInfo()) {
        oprot.writeString(struct.authorInfo);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetListStatus()) {
        oprot.writeI32(struct.listStatus);
      }
      if (struct.isSetInstSearchStatus()) {
        oprot.writeI32(struct.instSearchStatus);
      }
      if (struct.isSetInstId()) {
        oprot.writeI64(struct.instId);
      }
      if (struct.isSetHasAndroid()) {
        oprot.writeI32(struct.hasAndroid);
      }
      if (struct.isSetHasIOS()) {
        oprot.writeI32(struct.hasIOS);
      }
      if (struct.isSetAndroidVersion()) {
        oprot.writeString(struct.androidVersion);
      }
      if (struct.isSetIosVersion()) {
        oprot.writeString(struct.iosVersion);
      }
      if (struct.isSetPlatformType()) {
        oprot.writeI32(struct.platformType);
      }
      if (struct.isSetCoverType()) {
        oprot.writeI32(struct.coverType);
      }
      if (struct.isSetCoverResourceList()) {
        oprot.writeString(struct.coverResourceList);
      }
      if (struct.isSetCoverResourceIdArr()) {
        {
          oprot.writeI32(struct.coverResourceIdArr.size());
          for (String _iter8 : struct.coverResourceIdArr)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetDetailResourceList()) {
        oprot.writeString(struct.detailResourceList);
      }
      if (struct.isSetDetailResourceIdArr()) {
        {
          oprot.writeI32(struct.detailResourceIdArr.size());
          for (String _iter9 : struct.detailResourceIdArr)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizEventThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.team = iprot.readString();
        struct.setTeamIsSet(true);
      }
      if (incoming.get(6)) {
        struct.imageObj = iprot.readString();
        struct.setImageObjIsSet(true);
      }
      if (incoming.get(7)) {
        struct.coverObj = iprot.readString();
        struct.setCoverObjIsSet(true);
      }
      if (incoming.get(8)) {
        struct.direction = iprot.readI32();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sequence = iprot.readI32();
        struct.setSequenceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.category = iprot.readI32();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(12)) {
        struct.authorInfo = iprot.readString();
        struct.setAuthorInfoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(14)) {
        struct.listStatus = iprot.readI32();
        struct.setListStatusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.instSearchStatus = iprot.readI32();
        struct.setInstSearchStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.instId = iprot.readI64();
        struct.setInstIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.hasAndroid = iprot.readI32();
        struct.setHasAndroidIsSet(true);
      }
      if (incoming.get(18)) {
        struct.hasIOS = iprot.readI32();
        struct.setHasIOSIsSet(true);
      }
      if (incoming.get(19)) {
        struct.androidVersion = iprot.readString();
        struct.setAndroidVersionIsSet(true);
      }
      if (incoming.get(20)) {
        struct.iosVersion = iprot.readString();
        struct.setIosVersionIsSet(true);
      }
      if (incoming.get(21)) {
        struct.platformType = iprot.readI32();
        struct.setPlatformTypeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.coverType = iprot.readI32();
        struct.setCoverTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.coverResourceList = iprot.readString();
        struct.setCoverResourceListIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.coverResourceIdArr = new java.util.ArrayList<String>(_list10.size);
          String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.coverResourceIdArr.add(_elem11);
          }
        }
        struct.setCoverResourceIdArrIsSet(true);
      }
      if (incoming.get(25)) {
        struct.detailResourceList = iprot.readString();
        struct.setDetailResourceListIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.detailResourceIdArr = new java.util.ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.detailResourceIdArr.add(_elem14);
          }
        }
        struct.setDetailResourceIdArrIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

